import re
from datetime import datetime

# Clase Persona (Base)
class Persona:
    def __init__(self, nombre, contacto, direccion):
        self.nombre = nombre
        self.contacto = contacto
        self.direccion = direccion
    
    def __str__(self):
        return f"{self.nombre} | Contacto: {self.contacto} | Dirección: {self.direccion}"

# Clase Cliente (Hereda de Persona)
class Cliente(Persona):
    def __init__(self, nombre, contacto, direccion):
        super().__init__(nombre, contacto, direccion)
        self.mascotas = []
    
    def agregar_mascota(self, mascota):
        self.mascotas.append(mascota)
    
    def __str__(self):
        return super().__str__() + " | Mascotas: " + ", ".join([m.nombre for m in self.mascotas])

# Clase Mascota
class Mascota:
    def __init__(self, nombre, especie, raza, edad):
        self.nombre = nombre
        self.especie = especie
        self.raza = raza
        self.edad = edad
        self.historial = []
    
    def agregar_cita(self, cita):
        self.historial.append(cita)
    
    def __str__(self):
        return f"{self.nombre} ({self.especie}, {self.raza}, {self.edad} años)"

# Clase Cita
class Cita:
    def __init__(self, fecha, hora, servicio, veterinario):
        self.fecha = fecha
        self.hora = hora
        self.servicio = servicio
        self.veterinario = veterinario
    
    def __str__(self):
        return f"Cita: {self.fecha} {self.hora} | Servicio: {self.servicio} | Veterinario: {self.veterinario.nombre}"

# Clase Veterinario (Hereda de Persona)
class Veterinario(Persona):
    def __init__(self, nombre, contacto, direccion, especialidad):
        super().__init__(nombre, contacto, direccion)
        self.especialidad = especialidad
    
    def __str__(self):
        return f"{super().__str__()} | Especialidad: {self.especialidad}"

# Función para validar fechas en formato dd/mm/aaaa
def validar_fecha(fecha):
    try:
        datetime.strptime(fecha, "%d/%m/%Y")
        return True
    except ValueError:
        return False

# Función para validar que el teléfono tenga un formato básico de números
def validar_telefono(contacto):
    return bool(re.match(r'^\d{7,10}$', contacto))  # acepta números de 7 a 10 dígitos

# Función para validar que la edad sea un número entero positivo
def validar_edad(edad):
    return edad.isdigit() and int(edad) > 0

# Función para asegurarse de que el campo no esté vacío
def no_vacio(valor):
    return bool(valor.strip())

def mostrar_menu():
    print("Bienvenido al sistema de gestión de la veterinaria.")
    print("Seleccione una opción:")
    print("1. Registrar cliente")
    print("2. Registrar mascota")
    print("3. Programar cita")
    print("4. Consultar historial")
    print("5. Salir")

def registrar_cliente(clientes):
    while True:
        nombre = input("Ingrese el nombre del cliente: ")
        if no_vacio(nombre):
            break
        else:
            print("El nombre no puede estar vacío.")
    
    while True:
        contacto = input("Ingrese el contacto del cliente (7-10 dígitos): ")
        if validar_telefono(contacto):
            break
        else:
            print("El contacto debe ser un número válido de 7 a 10 dígitos.")
    
    while True:
        direccion = input("Ingrese la dirección del cliente: ")
        if no_vacio(direccion):
            break
        else:
            print("La dirección no puede estar vacía.")
    
    cliente = Cliente(nombre, contacto, direccion)
    clientes.append(cliente)
    print(f"Cliente {nombre} registrado con éxito.")

def registrar_mascota(clientes, mascotas):
    nombre_cliente = input("Ingrese el nombre del cliente para registrar la mascota: ")
    cliente = next((c for c in clientes if c.nombre == nombre_cliente), None)
    if cliente:
        while True:
            nombre_mascota = input("Ingrese el nombre de la mascota: ")
            if no_vacio(nombre_mascota):
                break
            else:
                print("El nombre de la mascota no puede estar vacío.")
        
        while True:
            especie = input("Ingrese la especie de la mascota: ")
            if no_vacio(especie):
                break
            else:
                print("La especie no puede estar vacía.")
        
        while True:
            raza = input("Ingrese la raza de la mascota: ")
            if no_vacio(raza):
                break
            else:
                print("La raza no puede estar vacía.")
        
        while True:
            edad = input("Ingrese la edad de la mascota: ")
            if validar_edad(edad):
                break
            else:
                print("La edad debe ser un número entero positivo.")
        
        mascota = Mascota(nombre_mascota, especie, raza, int(edad))
        cliente.agregar_mascota(mascota)
        mascotas.append(mascota)  # Aquí se agrega la mascota a la lista global de mascotas
        print(f"Mascota {nombre_mascota} registrada con éxito.")
    else:
        print("Cliente no encontrado.")

def programar_cita(mascotas, veterinarios):
    nombre_mascota = input("Ingrese el nombre de la mascota para programar la cita: ")
    mascota = next((m for m in mascotas if m.nombre == nombre_mascota), None)
    if mascota:
        while True:
            fecha = input("Ingrese la fecha de la cita (dd/mm/aaaa): ")
            if validar_fecha(fecha):
                break
            else:
                print("La fecha debe estar en formato dd/mm/aaaa.")
        
        while True:
            hora = input("Ingrese la hora de la cita (hh:mm): ")
            if re.match(r'^\d{2}:\d{2}$', hora):
                break
            else:
                print("La hora debe estar en formato hh:mm.")
        
        while True:
            servicio = input("Ingrese el servicio (consulta, vacunación, etc.): ")
            if no_vacio(servicio):
                break
            else:
                print("El servicio no puede estar vacío.")
        
        nombre_veterinario = input("Ingrese el nombre del veterinario: ")
        veterinario = next((v for v in veterinarios if v.nombre == nombre_veterinario), None)
        if veterinario:
            cita = Cita(fecha, hora, servicio, veterinario)
            mascota.agregar_cita(cita)
            print(f"Cita programada para la mascota {nombre_mascota}.")
        else:
            print("Veterinario no encontrado.")
    else:
        print("Mascota no encontrada.")

def consultar_historial(mascotas):
    nombre_mascota = input("Ingrese el nombre de la mascota para consultar su historial: ")
    mascota = next((m for m in mascotas if m.nombre == nombre_mascota), None)
    if mascota:
        if mascota.historial:
            print(f"Historial de {nombre_mascota}:")
            for cita in mascota.historial:
                print(cita)
        else:
            print(f"La mascota {nombre_mascota} no tiene citas registradas.")
    else:
        print("Mascota no encontrada.")

def main():
    clientes = []
    veterinarios = [Veterinario("Juan", "2339899", "Calle 80 con Avda Boyacá", "Vacunación")]
    mascotas = []
    
    while True:
        mostrar_menu()
        opcion = input("Seleccione una opción: ")
        
        if opcion == "1":
            registrar_cliente(clientes)
        elif opcion == "2":
            registrar_mascota(clientes, mascotas)  # Pasamos también la lista global de mascotas
        elif opcion == "3":
            programar_cita(mascotas, veterinarios)
        elif opcion == "4":
            consultar_historial(mascotas)
        elif opcion == "5":
            print("¡Hasta luego!")
            break
        else:
            print("Opción no válida.")

if __name__ == "__main__":
    main()
